<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <context:component-scan annotation-config="true"
                            base-package="org.mitre, org.hspconsortium.platform, org.smartplatforms, org.keycloak.adapters.springsecurity"/>

    <bean id="keycloakUserInfoRepository" primary="true"
          class="org.hspconsortium.platform.authorization.repository.impl.KeycloakUserInfoRepository">
    </bean>

    <security:authentication-manager id="keycloakAuthenticationManager">
        <security:authentication-provider ref="keycloakAuthenticationProvider"/>
    </security:authentication-manager>

    <bean id="adapterDeploymentContext" class="org.keycloak.adapters.springsecurity.AdapterDeploymentContextFactoryBean">
        <constructor-arg value="/WEB-INF/keycloak.json" />
    </bean>

    <bean id="keycloakAuthenticationEntryPoint" class="org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationEntryPoint">
        <constructor-arg index="0" ref="adapterDeploymentContext" />
        <!--<constructor-arg index="1" ref="requestMatcher" />-->
    </bean>
    <bean id="keycloakAuthenticationProvider" class="org.hspconsortium.platform.authorization.security.HspcKeycloakAuthenticationProvider" />
    <bean id="keycloakPreAuthActionsFilter" class="org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter" />
    <bean id="keycloakAuthenticationProcessingFilter" class="org.keycloak.adapters.springsecurity.filter.KeycloakAuthenticationProcessingFilter">
        <constructor-arg name="authenticationManager" ref="keycloakAuthenticationManager" />
    </bean>

    <bean id="keycloakLogoutHandler" class="org.keycloak.adapters.springsecurity.authentication.KeycloakLogoutHandler">
        <constructor-arg ref="adapterDeploymentContext" />
    </bean>

    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg name="logoutSuccessUrl" value="/" />
        <constructor-arg name="handlers">
            <list>
                <ref bean="keycloakLogoutHandler" />
                <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
            </list>
        </constructor-arg>
        <property name="logoutRequestMatcher">
            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                <constructor-arg name="pattern" value="/sso/logout**" />
                <constructor-arg name="httpMethod" value="GET" />
            </bean>
        </property>
    </bean>

    <security:http auto-config="false" authentication-manager-ref="keycloakAuthenticationManager" entry-point-ref="keycloakAuthenticationEntryPoint">
        <security:custom-filter ref="keycloakPreAuthActionsFilter" before="LOGOUT_FILTER" />
        <security:custom-filter ref="keycloakAuthenticationProcessingFilter" before="FORM_LOGIN_FILTER" />
        <security:intercept-url pattern="/**" access="permitAll()"/>
        <!--<security:intercept-url pattern="/sso/login**" access="permitAll()" />-->
        <!--<security:intercept-url pattern="/**" access="isAuthenticated()" />-->
        <!--<security:intercept-url pattern="/admin**" access="ROLE_ADMIN" />-->
        <security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
    </security:http>

    <!--<mvc:view-controller path="/login" view-name="login"/>-->

<!--
    <bean id="logoutSuccessHandler"
          class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="targetUrlParameter" value="${LOGOUT_SUCCESS_URL_PROPERTY}"/>
    </bean>
-->

<!--
    <security:http authentication-manager-ref="authenticationManager" disable-url-rewriting="true"
                   use-expressions="true">
        <security:form-login login-page="/login" authentication-failure-url="/login?error=failure"
                             authentication-success-handler-ref="authenticationTimeStamper"/>
        <security:intercept-url pattern="/**" access="permitAll"/>
        <security:custom-filter ref="authRequestFilter" after="SECURITY_CONTEXT_FILTER"/>
        <security:logout logout-url="/logout" success-handler-ref="logoutSuccessHandler"/>
        <security:anonymous/>
        <security:expression-handler ref="oauthWebExpressionHandler"/>
        <security:headers>
            &lt;!&ndash; allow the sandbox manager to launch in embedded mode &ndash;&gt;
            <security:frame-options disabled="true"/>
        </security:headers>
    </security:http>
-->

</beans>
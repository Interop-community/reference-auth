# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            - rm reference-auth-server-webapp/target/*-sources.jar
            - rm reference-auth-server-webapp/target/*-javadoc.jar
            # capture the values needed for subsequent steps
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - rm bitbucket-pipelines-env.sh || true
            - . sandbox-ci/aws/scripts/aws-us-east-1-defaults.sh auth test >> bitbucket-pipelines-env.sh
            - . sandbox-ci/docker/scripts/env-from-maven.sh reference-auth-server-webapp >> bitbucket-pipelines-env.sh
            - . bitbucket-pipelines-env-overrides.sh auth test >> bitbucket-pipelines-env.sh
            - cat bitbucket-pipelines-env.sh
            - chmod +x bitbucket-pipelines-env.sh
          artifacts:
            - reference-auth-server-webapp/target/*.war
            - reference-auth-server-webapp/target/dependency/jetty-runner.jar
            - bitbucket-pipelines-env.sh
      - step:
          name: build docker and upload to docker hub
          script:
            - . bitbucket-pipelines-env.sh
            - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            - docker build -t $DOCKER_IMAGE_COORDINATES .
            - docker push $DOCKER_IMAGE_COORDINATES
      - step:
          name: update the aws task definition
          script:
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - . bitbucket-pipelines-env.sh
            - export TEMPLATE_FILE="sandbox-ci/aws/templates/task-definition-template.json"
            - ./sandbox-ci/aws/scripts/env-substitution.sh $TEMPLATE_FILE
            - cat $(echo "$TEMPLATE_FILE")
            - jq '.containerDefinitions[0].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_TEST'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - cat $(echo "$TEMPLATE_FILE")
            - export TASK_RESPONSE=$(aws ecs register-task-definition --region $AWS_REGION --cli-input-json file://$TEMPLATE_FILE)
            # TODO this doesn't detect errors, but only captures the success message
            - echo $TASK_RESPONSE
      - step:
          name: Update the aws service
          deployment: test
          script:
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - . bitbucket-pipelines-env.sh
            - export AWS_TASK_DEFINITION=$(aws ecs describe-task-definition --region $AWS_REGION --task-definition "$AWS_TASK_NAME")
            - echo $AWS_TASK_DEFINITION
            - export AWS_TASK_VERSION=$(echo $AWS_TASK_DEFINITION | jq --raw-output '.taskDefinition.revision')
            - echo $AWS_TASK_VERSION
            - export SERVICE_RESPONSE=$(aws ecs update-service --region $AWS_REGION --cluster ${AWS_CLUSTER_NAME} --service ${AWS_SERVICE_NAME} --task-definition ${AWS_TASK_NAME}:${AWS_TASK_VERSION})
            # TODO this doesn't detect errors, but only captures the success message
            - echo $SERVICE_RESPONSE
    master:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            - rm reference-auth-server-webapp/target/*-sources.jar
            - rm reference-auth-server-webapp/target/*-javadoc.jar
            # capture the values needed for subsequent steps
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - rm bitbucket-pipelines-env.sh || true
            - . sandbox-ci/aws/scripts/aws-us-east-1-defaults.sh auth prod >> bitbucket-pipelines-env.sh
            - . sandbox-ci/docker/scripts/env-from-maven.sh reference-auth-server-webapp >> bitbucket-pipelines-env.sh
            - . bitbucket-pipelines-env-overrides.sh auth prod >> bitbucket-pipelines-env.sh
            - cat bitbucket-pipelines-env.sh
            - chmod +x bitbucket-pipelines-env.sh
          artifacts:
            - reference-auth-server-webapp/target/*.war
            - reference-auth-server-webapp/target/dependency/jetty-runner.jar
            - bitbucket-pipelines-env.sh
      - step:
          name: build docker and upload to docker hub
          script:
            - . bitbucket-pipelines-env.sh
            - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            - docker build -t $DOCKER_IMAGE_COORDINATES .
            - docker push $DOCKER_IMAGE_COORDINATES
      - step:
          name: update the aws task definition
          script:
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - . bitbucket-pipelines-env.sh
            - export TEMPLATE_FILE="sandbox-ci/aws/templates/task-definition-template.json"
            - ./sandbox-ci/aws/scripts/env-substitution.sh $TEMPLATE_FILE
            - cat $(echo "$TEMPLATE_FILE")
            - jq '.containerDefinitions[0].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_PROD'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - cat $(echo "$TEMPLATE_FILE")
            - export TASK_RESPONSE=$(aws ecs register-task-definition --region $AWS_REGION --cli-input-json file://$TEMPLATE_FILE)
            # TODO this doesn't detect errors, but only captures the success message
            - echo $TASK_RESPONSE
      - step:
          name: Update the aws service
          deployment: production
          script:
            - git clone https://bitbucket.org/hspconsortium/sandbox-ci.git
            - . bitbucket-pipelines-env.sh
            - export AWS_TASK_DEFINITION=$(aws ecs describe-task-definition --region $AWS_REGION --task-definition "$AWS_TASK_NAME")
            - echo $AWS_TASK_DEFINITION
            - export AWS_TASK_VERSION=$(echo $AWS_TASK_DEFINITION | jq --raw-output '.taskDefinition.revision')
            - echo $AWS_TASK_VERSION
            - export SERVICE_RESPONSE=$(aws ecs update-service --region $AWS_REGION --cluster ${AWS_CLUSTER_NAME} --service ${AWS_SERVICE_NAME} --task-definition ${AWS_TASK_NAME}:${AWS_TASK_VERSION})
            # TODO this doesn't detect errors, but only captures the success message
            - echo $SERVICE_RESPONSE
    feature/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    release/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    hotfix/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
options:
  docker: true